# Generic Workflow Schema Definition
# This template defines the structure for creating workflow YAML files
# that can be executed by the orchestrator agent

# CRITICAL DEPENDENCY: This workflow schema depends on the parse-workflow.js script
# Script location: utility-scripts/parse-workflow.js
# Script purpose: Parse workflow state from story files and generate Task tool calls for orchestrator agent coordination
# Usage: node utility-scripts/parse-workflow.js <workflow-file> [story-file] [options]

# Workflow metadata
workflow:
  # Unique identifier for this workflow type
  id: example-workflow
  # Human-readable name for the workflow
  name: Example Workflow Template
  # Brief description of what this workflow accomplishes
  description: Template showing the structure for defining multi-agent workflows
  # Version for compatibility tracking
  version: 1.0

# Global configuration for this workflow
config:
  # Maximum retry attempts for any step (default: 3)
  default-retry-limit: 3
  # Timeout in minutes for each step execution (default: 30)
  step-timeout: 30
  # Whether to continue workflow if non-critical steps fail
  continue-on-failure: false

# Sequential workflow steps definition
steps:
  # Step 1: Initial step example
  - id: step-1
    # Human-readable name for this step
    name: First Step
    # Agent to execute this step (must match agent file name)
    agent: test-writer
    # Task template to use for prompt generation
    task-template: write-tests-task.md
    # Success criteria for determining step completion
    success-criteria:
      # Expected status from agent response parsing
      status: success
      # Optional: specific content that should be present
      content-contains: "tests created"
    # Retry configuration for this specific step
    retry-limit: 3
    # Whether this step is required for workflow completion
    required: true
    # Dependencies (steps that must complete before this step)
    depends-on: []

  # Step 2: Implementation step example
  - id: step-2
    name: Implementation Step
    agent: backend-code-developer
    task-template: implement-feature-task.md
    success-criteria:
      status: success
      # Check that implementation files were created/modified
      files-modified: true
    retry-limit: 3
    required: true
    # This step depends on step-1 completing successfully
    depends-on: ["step-1"]

  # Step 3: Validation step example
  - id: step-3
    name: Validation Step
    agent: engineering-mentor-code
    task-template: validate-implementation-task.md
    success-criteria:
      status: success
      # Validation must pass all checks
      validation-passed: true
    retry-limit: 2
    required: true
    depends-on: ["step-2"]
    # Conditional routing based on validation results
    on-failure:
      # If validation fails, route back to implementation step
      route-to: step-2
      # Maximum number of feedback loops before failing workflow
      max-iterations: 3

# Error handling configuration
error-handling:
  # What to do when a required step fails permanently
  on-step-failure:
    action: halt-workflow
    # Update story status on failure
    update-story-status: "Blocked"
    # Message to include in story file
    failure-message: "Workflow failed at step: {{failed-step}}"

  # What to do when retry limits are exceeded
  on-retry-exceeded:
    action: halt-workflow
    update-story-status: "Needs Manual Review"
    failure-message: "Step {{step-id}} exceeded retry limit ({{retry-limit}})"

# Story file integration
story-integration:
  # How to track workflow progress in story file
  progress-tracking:
    # Use Task checkboxes for step completion
    method: task-checkboxes
    # Section in story file to update
    section: "Tasks / Subtasks"
    # Format for progress entries
    entry-format: "- [{{status}}] {{step-name}} (Workflow: {{workflow-name}})"

  # Story status updates during workflow
  status-updates:
    # Status when workflow starts
    on-start: "InProgress"
    # Status when workflow completes successfully
    on-success: "Ready for Review"
    # Status when workflow fails
    on-failure: "Blocked"

# Agent communication format
agent-communication:
  # Expected response format from agents
  response-format:
    # Agents should return structured responses
    type: structured-json
    # Required fields in agent responses
    required-fields:
      - status  # success/fail/partial
      - message # brief description of work performed
      - next-action # ready-for-next-step/needs-retry/manual-review
    # Optional fields for enhanced coordination
    optional-fields:
      - issues # list of problems encountered
      - files-modified # list of files changed
      - recommendations # suggestions for next steps

# Template variables available during workflow execution
template-variables:
  # Workflow context variables
  workflow:
    - name # Current workflow name
    - id # Current workflow ID
    - current-step # Current step ID
    - retry-count # Current retry count for step
    - previous-result # Output from previous step
    - step-number # Sequential step number

  # Story context variables (inherited from parse-prompt.js)
  story:
    - file-path # Path to story file
    - title # Story title
    - status # Current story status
    - epic-number # Epic number
    - story-number # Story number

  # Configuration variables (from story frontmatter and config file)
  config:
    - outputBase # Base output directory
    - featurePrefix # Feature prefix path
    - All other config values dynamically included

# Usage Examples:
#
# 1. TDD Workflow:
#    - Step 1: test-writer creates tests
#    - Step 2: backend-code-developer implements code
#    - Step 3: engineering-mentor validates implementation
#    - Feedback loop: If validation fails, route back to step 2
#
# 2. Code Review Workflow:
#    - Step 1: engineering-mentor reviews code changes
#    - Step 2: backend-code-developer addresses feedback
#    - Step 3: engineering-mentor re-validates
#
# 3. Story Creation Workflow:
#    - Step 1: sm (scrum master) analyzes requirements
#    - Step 2: architect-agent designs implementation approach
#    - Step 3: sm creates comprehensive story document